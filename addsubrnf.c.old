#include <stdio.h>
#include "addsubrn.h"

/********************************************************
*Read numbers function
*
*
*
*********************************************************/
int ReadNumber(char *msg, char *num){
   int code;
   //printf("\nStarting ReadNumber function");
   //char buff[MAX_LEN];

   code = GetLine (msg, num, MAX_LEN);
   if (code == NO_INPUT) {
       
   }else if (code == TOO_LONG){
      printf ("\nThe maximun length is %d, the number was cutted !!!",(MAX_LEN-1));
      //printf ("\nNumber: %s",buff);
      code = OK;
   }else if (code == OK){
      //printf ("\nNumber: %s",buff);
   }else{
      printf ("\nUndefined number option !!!");
   }
   return code;           
}

/********************************************************
*Convert to uppercase and validate characters
*
*********************************************************/
int ConvertUppercaseValidateChar(char *num){
   int code = OK;
   int i,j; //for iterators
   for (i = 0; i < MAX_LEN; i++) {
      if (num[i] == '\0') {
         break;
      } else {
         num[i] = num[i] & 0xdf;
         if (num[i] != 'I' && num[i] != 'V' && num[i] != 'X' && num[i] != 'L' && 
             num[i] != 'C' && num[i] != 'D' && num[i] != 'M'){
            code = CHAR_IS_NO_ROMAN;
            printf ("\nOne or more characters are not roman numerals, please introduce a valid number");
            break;
         }
      }
   }   
   return code;
}

/********************************************************
*Validate roman number.
*Validate secuence of symbols
*********************************************************/
int ValidateRoman (char *num){
   int code = OK;
   char last;
   int contConsecutive = 0; //counter for consecutive symbols
   int contI = 0; 
   int contV = 0; 
   int contX = 0; 
   int contL = 0; 
   int contC = 0; 
   int contD = 0;
   int contM = 0; 
   int contOthers = 0; 
   //
   int i,j; //for iterators
   for (i=0; i < MAX_LEN; i++){
      if (num[i] == '\0') {
         break;
      }
      //
      switch (num[i]){
         case 'I': contI++; break;
         case 'V': contV++; break;
         case 'X': contX++; break;
         case 'L': contL++; break;
         case 'C': contC++; break;
         case 'D': contD++; break;
         case 'M': contM++; break;
         default: contOthers++; break;
      }
      //
      if (i == 0){
         contConsecutive = 1;
      } else {
         if (num[i-1] == num[i]){
            contConsecutive++;
         } else {
            contConsecutive = 1;
         }
         //validate no more than three I,X,C,M
         if (contConsecutive == 4 && (num[i] == 'I' || num[i] == 'X' || num[i] == 'C' || num[i] == 'M')) {
            code = MORE_THAN_THREE_IXCM_ROMAN;
            printf ("\nThe roman numeral can not contain more than three consecutive symbols: I, X, C or M");
            break;
         }
         //validate no more than one V,L,D
         if (contV > 1 || contL > 1 || contD > 1) {
            code = MORE_THAN_ONE_VLD_ROMAN;
            printf ("\nThe roman numeral can not contain more than one symbol: V, L or D");
            break;
         }
         //validate possible letters before M
         if (num[i] == 'M') {
            if (contI > 0 || contV > 0 || contX > 0 || contL > 0 || contD > 0){
               printf("The symbols I, V, X, L or D can not be located to the left of symbol M.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contC > 1){
               //ejem: ccm
               printf("The symbols C can not be located to the left of symbol M more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contConsecutive >= 2 && contC > 0){
               //ejem: cmm
               printf("The symbol C can not be located to the left of two or more symbols M.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            }
         }
         //validate possible letters before D
         if (num[i] == 'D') {
            if (contI > 0 || contV > 0 || contX > 0 || contL > 0){
               printf("The symbols I, V, X or L can not be located to the left of symbol D.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contC > 1){
               //ejem: ccd
               printf("The symbols C can not be located to the left of symbol D more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } 
         } 
         //validate possible letters before C
         if (num[i] == 'C') {
            if (contI > 0 || contV > 0 || contL){
               printf("The symbols I, V or X can not be located to the left of symbol C.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contX > 1){
               //ejem: xxc
               printf("The symbols X can not be located to the left of symbol C more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contConsecutive >= 2 && contX > 0){
               //ejem: xcc
               printf("The symbol X can not be located to the left of two or more symbols C.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            }
         }
         //validate possible letters before L
         if (num[i] == 'L') {
            if (contI > 0 || contV > 0){
               printf("The symbols I or V can not be located to the left of symbol L.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contX > 1){
               //ejem: xxl
               printf("The symbols X can not be located to the left of symbol L more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            }
         } 
         //validate possible letters before X
         if (num[i] == 'X') {
            if (contV > 0){
               printf("The symbol V can not be located to the left of symbol X.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contI > 1){
               //ejem: iix
               printf("The symbols X can not be located to the left of symbol X more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            } else if (contConsecutive >= 2 && contI > 0){
               //ejem: ixx
               printf("The symbol I can not be located to the left of two or more symbols X.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            }
         }
         //validate possible letters before V
         if (num[i] == 'V') {
            if (contI > 1){
               //ejem: iiv
               printf("The symbols I can not be located to the left of symbol V more than once.");
               code = SYNTAX_ERROR_ROMAN;
               break;
            }
         } 
      }
      
   }
   //
   return code;

}

/********************************************************
*get line function
*
//Reference: 
//http://stackoverflow.com/questions/4023895/how-to-read-string-entered-by-user-in-c 
*********************************************************/
static int GetLine (char *msg, char *num, size_t sz) {
    int ch, extra;

    // Get line with buffer overrun protection.
    if (msg != NULL) {
        printf ("\n\n%s", msg);
        fflush (stdout);
        
    }
    if (fgets (num, sz, stdin) == NULL)
        return NO_INPUT;

    // If it was too long, there'll be no newline. In that case, we flush
    // to end of line so that excess doesn't affect the next call.
    if (num[strlen(num)-1] != '\n') {
        extra = 0;
        while (((ch = getchar()) != '\n') && (ch != EOF))
            extra = 1;
        return (extra == 1) ? TOO_LONG : OK;
    }

    // Otherwise remove newline and give string back to caller.
    num[strlen(num)-1] = '\0';
    return OK;
}
